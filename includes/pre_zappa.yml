---
- include: build_project_dir.yml
- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Download Project
      git:
        repo: 'https://github.com/codeforamerica/intake.git'
        dest: "{{ project_path }}"
        version: feature/zappa_changes

    - name: Install Project requirements
      pip:
        requirements: "{{ project_path }}/requirements/zappa.txt"
        virtualenv: "{{ venv_path }}"
        virtualenv_python: python3.6
      environment:
        PYTHONPATH: "python3.6"

    - name: Install NPM requirements
      shell: "npm install"
      args:
        chdir: "{{ project_path }}"

    - name: Create Security Group for Lambda Application
      ec2_group:
        name: "{{ project_slug }}-lambda-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
      register: "lambda_sg"

    - name: Create Zappa Settings File
      template:
        src: ../templates/zappa_settings.json.j2
        dest: "{{ project_path  }}/zappa_settings.json"

    - name: Running Collectstatic
      shell: "{{ venv_path }}/bin/python ./manage.py collectstatic --no-input --settings project.settings.development"
      args:
        chdir: "{{ project_path }}"
        executable: /bin/bash
      environment:
        PYTHONPATH: "python3.6"
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        SECRET_KEY: "{{ secret_key }}"
        TEST_USER_PASSWORD: "{{ test_user_password }}"
        DATABASE_HOST: "{{ database.instance.endpoint }}"
        DATABASE_PASSWORD: "{{ pg_app_password }}"
        PURGED_DATABASE_HOST: "{{ database.instance.endpoint }}"
        PURGED_DATABASE_PASSWORD: "{{ pg_app_password }}"
        AWS_ID: "{{ aws_id }}"
        AWS_SECRET: "{{ aws_secret }}"
        STATIC_BUCKET: "{{ project_slug }}-static-files"
        MEDIA_BUCKET: "{{ project_slug }}-media-files"

    - name: Running Compressor
      shell: "{{ venv_path }}/bin/python ./manage.py compress --engine jinja2 --extension jinja --settings project.settings.development"
      args:
        chdir: "{{ project_path }}"
        executable: /bin/bash
      environment:
        PYTHONPATH: "python3.6"
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        SECRET_KEY: "{{ secret_key }}"
        TEST_USER_PASSWORD: "{{ test_user_password }}"
        DATABASE_HOST: "{{ database.instance.endpoint }}"
        DATABASE_PASSWORD: "{{ pg_app_password }}"
        PURGED_DATABASE_HOST: "{{ database.instance.endpoint }}"
        PURGED_DATABASE_PASSWORD: "{{ pg_app_password }}"
        AWS_ID: "{{ aws_id }}"
        AWS_SECRET: "{{ aws_secret }}"
        STATIC_BUCKET: "{{ project_slug }}-static-files"
        MEDIA_BUCKET: "{{ project_slug }}-media-files"

