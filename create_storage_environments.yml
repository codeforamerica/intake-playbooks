---
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: "Create {{ project }} {{ project_slug }} VPC"
      ec2_vpc_net:
        state: present
        name: "{{ project_slug }}-vpc"
        region: "{{ region }}"
        cidr_block: 10.0.0.0/16
        resource_tags: '{"Name":"{{ project_slug }}_vpc"}'
      register: vpc

    - name: "Create {{ project_slug }} public subnet"
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        az: "{{ az }}"
        cidr: 10.0.0.0/24
        resource_tags: '{"Name": "{{ project_slug }}_subnet_public"}'
      register: subnet_public

    - name: "Create  {{ project_slug }} public subnet 2"
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        az: "{{ az2 }}"
        cidr: 10.0.1.0/24
        resource_tags: '{"Name": "{{ project_slug }}_subnet_public2"}'
      register: "subnet_public2"

    - name: "Create IGW"
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ project_slug }}_public_route"
        subnets:
          - "{{ subnet_public.subnet.id }}"
          - "{{ subnet_public2.subnet.id }}"

        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table

    - name: "Create and associate production DMZ network ACL with DMZ subnets"
      ec2_vpc_nacl:
        vpc_id: "{{ vpc.vpc.id }}"
        name: "{{ project_slug }}-nacl"
        region: "{{ region }}"
        subnets: ["{{ project_slug }}_subnet_public", "{{ project_slug }}_subnet_public2"]

        ingress: [
            # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type,
            #                                             port from, port to
            [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432],
        ]
        egress: [
            [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
        ]
        state: 'present'

    - name: Create private subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        az: "{{ az }}"
        cidr: 10.0.2.0/24
        resource_tags:
          Name: "{{ project_slug }}_subnet_private"
      register: "subnet_private"

    - name: Create private subnet2
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        az: "{{ az2 }}"
        cidr: 10.0.3.0/24
        resource_tags:
          Name: "{{ project_slug }}_subnet_private2"
      register: "subnet_private2"

    - name: Create RDS subnet group
      rds_subnet_group:
        region: "{{ region }}"
        state: present
        name: "{{ project_slug }}-rds-subnet-group"
        description: "Database subnet for {{ project_slug }} instance of {{ project }}"
        subnets:
          - "{{ subnet_public.subnet.id }}"
          - "{{ subnet_public2.subnet.id }}"
          - "{{ subnet_private.subnet.id }}"
          - "{{ subnet_private2.subnet.id }}"
      register: "rds_subnet_group"

    - name: Create database security group
      ec2_group:
        name: "{{ project_slug }}-rds-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: 0.0.0.0/0
      register: "rds_sg"

    - name: Create S3 bucket for application media
      s3_bucket:
        name: "{{ project_slug }}"
        state: present
        versioning: yes

    - name: Create S3 User for Application
      iam:
        iam_type: user
        name: "{{ project_slug }}-s3-user"
        state: present
        access_key_state: create

    - name: Create S3 permission for application user on media bucket
      iam_policy:
        policy_name: "{{ project_slug }}-s3-policy"
        iam_name: "{{ project_slug }}-s3-user"
        iam_type: user
        state: present
        region: "{{ region }}"
        policy_json: >
          {
              "Statement": [
                  {
                      "Action": [
                          "s3:ListBucket",
                          "s3:GetBucketLocation",
                          "s3:ListBucketMultipartUploads",
                          "s3:ListBucketVersions"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ project_slug }}"
                      ]
                  },
                  {
                      "Action": [
                          "s3:*Object*",
                          "s3:ListMultipartUploadParts",
                          "s3:AbortMultipartUpload"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ project_slug }}/*"
                      ]
                  }
              ],
              "Version": "2012-10-17"
          }

    - name: Create S3 bucket to hold fixtures for data sync
      s3_bucket:
        name: "{{ project_slug }}-sync"
        state: present
        versioning: no
      when: clone_from_project_slug is undefined

    - name: Create S3 User to access the sync and media bucket
      iam:
        iam_type: user
        name: "{{ project_slug }}-sync-s3-user"
        state: present
        access_key_state: create

    - name: Create S3 permission for sync user on sync bucket
      iam_policy:
        policy_name: "{{ project_slug }}-sync-s3-policy"
        iam_name: "{{ project_slug }}-sync-s3-user"
        iam_type: user
        state: present
        region: "{{ region }}"
        policy_json: >
          {
              "Statement": [
                  {
                      "Action": [
                          "s3:ListBucket",
                          "s3:GetBucketLocation",
                          "s3:ListBucketMultipartUploads",
                          "s3:ListBucketVersions"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ clone_from_project_slug is undefined | ternary(project_slug, clone_from_project_slug) }}-sync"
                      ]
                  },
                  {
                      "Action": [
                          "s3:*Object*",
                          "s3:ListMultipartUploadParts",
                          "s3:AbortMultipartUpload"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ clone_from_project_slug is undefined | ternary(project_slug, clone_from_project_slug) }}-sync/*"
                      ]
                  }
              ],
              "Version": "2012-10-17"
          }

    - name: Create Read-Only S3 permission for sync User to pull original media bucket
      iam_policy:
        policy_name: "{{ project_slug }}-s3-readonly-from-{{ clone_from_project_slug }}"
        iam_name: "{{ project_slug }}-sync-s3-user"
        iam_type: user
        state: present
        region: "{{ region }}"
        policy_json: >
          {
              "Statement": [
                  {
                      "Action": [
                          "s3:ListBucket",
                          "s3:GetBucketLocation"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ clone_from_project_slug }}"
                      ]
                  },
                  {
                      "Action": [
                          "s3:GetObject"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        "arn:aws:s3:::{{ clone_from_project_slug }}/*"
                      ]
                  }
              ],
              "Version": "2012-10-17"
          }
      when: clone_from_project_slug is defined

    - name: Create Write S3 permission for sync User to push to the replica media bucket
      iam_policy:
        policy_name: "{{ project_slug }}-s3-media-sync-policy"
        iam_name: "{{ project_slug }}-sync-s3-user"
        iam_type: user
        state: present
        region: "{{ region }}"
        policy_json: >
          {
              "Statement": [
                  {
                      "Action": [
                          "s3:ListBucket",
                          "s3:GetBucketLocation",
                          "s3:ListBucketMultipartUploads",
                          "s3:ListBucketVersions"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ project_slug }}"
                      ]
                  },
                  {
                      "Action": [
                          "s3:*Object*",
                          "s3:ListMultipartUploadParts",
                          "s3:AbortMultipartUpload"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                          "arn:aws:s3:::{{ project_slug }}/*"
                      ]
                  }
              ],
              "Version": "2012-10-17"
          }
      when: clone_from_project_slug is defined

    - name: Create RDS postgres instance
      command: "aws rds create-db-instance
        --db-instance-identifier {{ project_slug }}-database
        --storage-type gp2
        --allocated-storage {{ pg_fs_size }}
        --db-instance-class {{ pg_instance_type }}
        --engine postgres
        --master-username {{ pg_username }}
        --master-user-password {{ pg_password }}
        --vpc-security-group-ids {{ rds_sg.group_id }}
        --availability-zone {{ az }}
        --db-subnet-group-name {{ project_slug }}-rds-subnet-group
        --auto-minor-version-upgrade
        --no-multi-az
        --publicly-accessible
        --storage-encrypted"
      register: result
      failed_when: >
        result.rc != 0 and ('DBInstanceAlreadyExists' not in result.stderr)
      changed_when: "result.rc == 0"

    - rds:
        command: facts
        instance_name: "{{ project_slug }}-database"
        region: "{{ region }}"
      register: database
      until: not(database.instance.endpoint is none)
      retries: 20
      delay: 45
    - pause:
        seconds: 5

    - name: Create Datbase
      postgresql_db:
        login_host: "{{ database.instance.endpoint }}"
        login_user: "{{ pg_username }}"
        login_password: "{{ pg_password }}"
        name: intake

    - name: Create Application User with DB access
      postgresql_user:
        login_host: "{{ database.instance.endpoint }}"
        login_user: "{{ pg_username }}"
        login_password: "{{ pg_password }}"
        db: intake
        name: "{{ pg_app_username }}"
        password: "{{ pg_app_password }}"
        priv: "CONNECT"
        role_attr_flags: NOSUPERUSER
        no_password_changes: true

    - name: Give Application User CREATE on database so they can make schemas
      postgresql_privs:
        login_host: "{{ database.instance.endpoint }}"
        login_user: "{{ pg_username }}"
        login_password: "{{ pg_password }}"
        db: intake
        privs: CREATE
        type: database
        obj: intake
        role: intake
